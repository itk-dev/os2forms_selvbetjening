<?php

/**
 * @file
 * Module file for os2forms_maestro_webform.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\os2forms_maestro_webform\MaestroHelper;

/**
 * Implements hook_maestro_zero_user_notification().
 */
function os2forms_maestro_webform_maestro_zero_user_notification($templateMachineName, $taskMachineName, $queueID, $notificationType) {
  _os2forms_maestro_webform_helper()->maestroZeroUserNotification($templateMachineName, $taskMachineName, $queueID, $notificationType);
}

/**
 * Implements hook_form_alter().
 *
 * Your implementation is a direct copy from Maestro Webform's form alter. So is
 * this one. Your implementation has no special save handler and offloads to
 * Maestro's. Maestro's now has a special handling mechanism to try to correlate
 * the token to the queue and the form submission values. Maestro also detects
 * if the webform being altered is a maestro webform task type (inherited too)
 *
 * @todo architecture question
 * should you not be validating the company somehow? Same email address on both
 * forms?
 */
function os2forms_maestro_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  maestro_webform_form_alter($form, $form_state, $form_id);

  // Add your own submit handler for validation here?
}

/**
 * Implements hook_maestro_can_user_execute_task_alter().
 *
 * For OS2Forms, you may have a consistent assignment to an "anonymous" user via
 * a role. Use the QueueID and userID to drill into the task and alter the
 * returnValue to TRUE if this is a user that should be looking at this task.
 *
 * You can make this as complex as you'd like it to be, checking things like
 * sessions, login tokens, email addresses etc.
 */
function os2forms_maestro_webform_maestro_can_user_execute_task_alter(&$returnValue, $queueID, $userID) {
  _os2forms_maestro_webform_helper()->maestroCanUserExecuteTaskAlter($returnValue, $queueID, $userID);
}

/**
 * Implements hook_mail().
 */
function os2forms_maestro_webform_mail($key, &$message, $params) {
  _os2forms_maestro_webform_helper()->mail($key, $message, $params);
}

/**
 * Implements hook_mail_alter().
 */
function os2forms_maestro_webform_mail_alter(&$message) {
  _os2forms_maestro_webform_helper()->mailAlter($message);
}

/**
 * Implements hook_preprocess_entity_print().
 */
function os2forms_maestro_webform_preprocess_entity_print(array &$variables) {
  _os2forms_maestro_webform_helper()->preprocessEntityPrint($variables);
}

/**
 * Implements hook_theme().
 */
function os2forms_maestro_webform_theme(array &$variables) {
  $theme['os2forms_maestro_webform_notification_message_email_html'] = [
    'variables' => [
      'message' => [
        'content' => [
          'value' => NULL,
          'format' => NULL,
        ],
      ],
      'task_url' => NULL,
      'action_label' => NULL,
      'webform_submission' => NULL,
      'handler' => NULL,
    ],
  ];

  $theme['os2forms_maestro_webform_notification_message_pdf_html'] = $theme['os2forms_maestro_webform_notification_message_email_html'];

  return $theme;
}

/**
 * Get MaestroHelper.
 */
function _os2forms_maestro_webform_helper(): MaestroHelper {
  return Drupal::service(MaestroHelper::class);
}
