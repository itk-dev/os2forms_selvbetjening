<?php

/**
 * @file
 * Install, update and uninstall functions for the os2forms_forloeb.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\maestro\Engine\MaestroEngine;
use Drupal\os2forms_forloeb\Plugin\EngineTasks\MaestroWebformInheritTask;
use Drupal\os2forms_forloeb\MaestroHelper;
use Drupal\user\Entity\User;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformInterface;

/**
 * Implements hook_maestro_interactive_handlers().
 *
 * Handler for the return of an Array
 * of function names and help text that will be displayed in the edit task
 * form under the handler field.
 */
function os2forms_forloeb_maestro_interactive_handlers() {
  return [
    'os2forms_forloeb_workflow_maestro_reassign_form' => t('TilfÃ¸j sagsbehandler'),
  ];
}

/**
 * The Reassign for Approval form used in maestro workflows.
 *
 * @param array $form
 *   The array that contains the form.
 * @param object $obj
 *   References the calling object.
 * @param int $queueID
 *   The queueID from Maestro.
 */
function os2forms_forloeb_workflow_maestro_reassign_form(array &$form, $obj, $queueID = 0) {

  $form['reviewer'] = [
    '#id' => 'select_assigned_user',
    '#type' => 'entity_autocomplete',
    '#target_type' => 'user',
    '#default_value' => '',
    '#selection_settings' => ['include_anonymous' => FALSE],
    '#title' => t('Assign for Review to'),
  ];

  $form['queueID'] = [
    '#type' => 'hidden',
    '#title' => 'the queue ID in the event we need it in later processing',
    '#default_value' => $queueID,
    '#description' => ('queueID'),
  ];

  // Overriding the default label "complete".
  $form['actions']['submit']['#value'] = t('Assign');

  return $form;
}

/**
 * Submit handler for The Reassign for Approval form.
 *
 * This is the submit handler for the Reassign for Approval form
 * used in maestro workflows.
 */
function os2forms_forloeb_workflow_maestro_reassign_form_submit(&$form, &$form_state) {

  $queueID = intval($form_state->getValue('queueID'));
  $processID = MaestroEngine::getProcessIdFromQueueId($queueID);

  // Who was selected? Load their username, which is the user attribute
  // that Maestro assigns tasks by.
  $reviewer_uid = $form_state->getValue('reviewer');
  // Pass your uid.
  $reviewer = User::load($reviewer_uid);
  $reviewer_username = $reviewer->getAccountName();

  // Add that user to our maestro process variable.
  MaestroEngine::setProcessVariable("assigned_to", $reviewer_username, $processID);

  // Provide some feedback.
  \Drupal::messenger()->addStatus("Content Reassigned");
}

/**
 * Implements hook_maestro_batch_handlers().
 *
 * Array of function names and help text that will be displayed
 * in the edit task form under the handler field.
 */
function os2forms_forloeb_maestro_batch_handlers() {
  return [
    'os2forms_forloeb_end_notification_batch_function' => t('Batch function to send out flow completion notification to initiator.'),
  ];
}

/**
 * Finishing callback for batch handler.
 *
 * @param int $processID
 *   The Maestro process ID.
 * @param int $queueID
 *   The Maestro queue ID.
 */
function os2forms_forloeb_end_notification_batch_function($processID, $queueID) {

  /*
   * Pseudocode for handling this:
   *
   *     * Get entity item for webform which spawned this process
   *      (ID "submission").
   *       foreach handler in webform: {
   *           if (email_handler) {
   *               email_handler.submit();
   *           }
   *       }
   */
  $sid = MaestroEngine::getEntityIdentiferByUniqueID($processID, 'submission');

  if ($sid) {
    $webform_submission = WebformSubmission::load($sid);
    $webform = $webform_submission->getWebform();
    $handlers = $webform->getHandlers();

    foreach ($handlers as $handler) {
      if (method_exists($handler, 'getMessage')) {
        $message = $handler->getMessage($webform_submission);
        $handler->sendMessage($webform_submission, $message);
      }
    }
  }

  return TRUE;
}

/**
 * Implements hook_ENTITY_TYPE_create().
 *
 * Sets a global purge setting for all webform submissions to 30 days.
 */
function os2forms_forloeb_webform_create(WebformInterface $webform) {
  // Set purge of all users submissions.
  $webform->setSetting('purge', 'all');
  // Set purge of submissions more than 30 days old.
  if (empty($webform->getSetting('purge_days'))) {
    $webform->setSetting('purge_days', '30');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Update webform specific submissions purge settings.
 */
function os2forms_forloeb_webform_presave(WebformInterface $webform) {
  // Add a purge time frame if not set.
  if (empty($webform->getSetting('purge_days'))) {
    $webform->setSetting('purge_days', 30);
  }
}

/**
 * Set Process Variable (SPV) function.
 *
 * Uses the webform's unique identifier referenced in the Maestro "webforms"
 * process variable to read a value from the webform submission and return it
 * to the SPV task to set the process variable in the task.
 * The function assumes that the value to be extracted is the SID of a user
 * and returns the username instead.
 * This seems to be the easiest way to accomplish this.
 *
 * The "webforms" process variable is set by the Maestro Webforms
 * submission handler which sets a "submission:xxx" value
 * in the "webforms" process variable, where "xxx" is the unique ID
 * of the submission, or is set by the Maestro Webform Task Type's
 * "Unique Identifier" setting when editing a Maestro Webform Task.
 *
 * @param string $uniqueWebformIdentifier
 *   The webform's "Unique Identifier" as stored
 *    in the "webforms" process variable.
 * @param string $webformFieldMachineName
 *   The webform field's machine name
 *    (listed as "KEY" in the webform builder) you wish to pull the value from.
 * @param int $queueID
 *   Provided by the executing SPV task -- the QueueID of the SPV task.
 * @param int $processID
 *   Provided by the executing SPV task -- the ProcessID of the workflow
 *    running the SPV task.
 */
function os2forms_forloeb_spv_fetch_entity_username($uniqueWebformIdentifier, $webformFieldMachineName, $queueID, $processID) {
  $returnValue = 'unset';
  // This is the submission we're eventually after.
  $sid = FALSE;
  $sid = MaestroEngine::getEntityIdentiferByUniqueID($processID, $uniqueWebformIdentifier);
  if ($sid) {
    $webform_submission = WebformSubmission::load($sid);
  }
  if ($webform_submission && array_key_exists($webformFieldMachineName, $webform_submission->getData())) {
    $returnValue = $webform_submission->getData()[$webformFieldMachineName];
  }
  // At this point, the submission's value OR 'unset' is in the $returnValue.
  if ($returnValue == 'unset' or !$returnValue) {
    return $returnValue;
  }
  $account = User::load($returnValue);
  $username = $account->getUsername();
  return $username;
}

/**
 * Returns array of custom task-types for OS2forms.
 */
function os2forms_forloeb_get_custom_task_types() {
  return ['MaestroWebformMultiple', 'MaestroWebformInherit'];
}

/**
 * Implements hook_form_alter() for MaestroWebformMultiple task type.
 *
 * This has been copied from
 * maestro/maestro_webform/maestro_webform.module with a minimal but
 * necessary change. See https://www.drupal.org/project/maestro/issues/3243510
 * When that issue has been fixed, this hook implementation
 * can be safely deleted.
 */
function os2forms_forloeb_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $queueID = intval(\Drupal::request()->query->get('queueid', 0));
  $isMaestro = intval(\Drupal::request()->query->get('maestro', 0));
  // Both these keys need to exist.
  if ($isMaestro && $queueID) {
    $templateTask = MaestroEngine::getTemplateTaskByQueueID($queueID);
    // Get array of custom task-types.
    $os2forms_forloeb_custom_task_types = os2forms_forloeb_get_custom_task_types();
    // We only care about custom Task-types
    // defined in os2forms_forloeb_get_custom_task_types()
    if ($templateTask && in_array($templateTask['tasktype'], $os2forms_forloeb_custom_task_types)) {
      $storage = $form_state->getStorage();
      if ($storage && array_key_exists('form_display', $storage)) {
        $thisForm = $storage['form_display']->get('bundle');
        $targetEntityType = $storage['form_display']->get('targetEntityType');
        if ($isMaestro == 1 &&
            $targetEntityType == 'webform_submission' &&
            $templateTask['data']['webform_machine_name'] == $thisForm) {
          // We now know this is a webform submission.
          // We are going to add in our own form fields here.
          $form['maestro'] = [
            '#tree' => TRUE,
          ];

          $form['maestro']['type'] = [
            '#type' => 'hidden',
            '#default_value' => $thisForm,
            '#required' => TRUE,
          ];

          $form['maestro']['queue_id'] = [
            '#type' => 'hidden',
            '#default_value' => $queueID,
            '#required' => TRUE,
          ];

          $form['maestro']['process_id'] = [
            '#type' => 'hidden',
            '#default_value' => MaestroEngine::getProcessIdFromQueueId($queueID),
            '#required' => TRUE,
          ];

          $form['actions']['submit']['#submit'][] = 'maestro_webform_webform_type_task_submit';

        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function os2forms_forloeb_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'os2forms_forloeb/os2forms_forloeb';
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function os2forms_forloeb_webform_submission_form_alter(array &$form, FormStateInterface $formState, string $formId) {
  MaestroWebformInheritTask::webformSubmissionFormAlter($form, $formState, $formId);
}

/**
 * Implements hook_maestro_zero_user_notification().
 */
function os2forms_forloeb_maestro_zero_user_notification($templateMachineName, $taskMachineName, $queueID, $notificationType) {
  _os2forms_forloeb_helper()->maestroZeroUserNotification($templateMachineName, $taskMachineName, $queueID, $notificationType);
}

/**
 * Implements hook_maestro_can_user_execute_task_alter().
 *
 * For OS2Forms, you may have a consistent assignment to an "anonymous" user via
 * a role. Use the QueueID and userID to drill into the task and alter the
 * returnValue to TRUE if this is a user that should be looking at this task.
 *
 * You can make this as complex as you'd like it to be, checking things like
 * sessions, login tokens, email addresses etc.
 */
function os2forms_forloeb_maestro_can_user_execute_task_alter(&$returnValue, $queueID, $userID) {
  _os2forms_forloeb_helper()->maestroCanUserExecuteTaskAlter($returnValue, $queueID, $userID);
}

/**
 * Implements hook_mail().
 */
function os2forms_forloeb_mail($key, &$message, $params) {
  _os2forms_forloeb_helper()->mail($key, $message, $params);
}

/**
 * Implements hook_mail_alter().
 */
function os2forms_forloeb_mail_alter(&$message) {
  _os2forms_forloeb_helper()->mailAlter($message);
}

/**
 * Implements hook_theme().
 */
function os2forms_forloeb_theme(array &$variables) {
  $theme['os2forms_forloeb_notification_message_email_html'] = [
    'variables' => [
      'message' => [
        'content' => [
          'value' => NULL,
          'format' => NULL,
        ],
      ],
      'task_url' => NULL,
      'action_label' => NULL,
      'webform_submission' => NULL,
      'handler' => NULL,
    ],
  ];

  $theme['os2forms_forloeb_notification_message_pdf_html'] = $theme['os2forms_forloeb_notification_message_email_html'];

  return $theme;
}

/**
 * Get MaestroHelper.
 */
function _os2forms_forloeb_helper(): MaestroHelper {
  return Drupal::service(MaestroHelper::class);
}
